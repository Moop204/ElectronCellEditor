import { Menu, app, BrowserWindow } from "electron";
// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: any;

// import libCellMLModule from "./backend/mainLibcellml/libcellml.js";
// import libCellMLWasm from "./backend/mainLibcellml/libcellml.wasm";

// import libCellMLModule from "libcellml.js";
// import libCellMLWasm from "libcellml.js/libcellml.wasm";

import FileManagement from "./backend/FileManagement";
import { menuTemplate } from "./menu/MenuTemplate";

let mainWindow;
const fm = new FileManagement();
fm.init();
fm.setupHandlers();

// // Not needed
// const init = async () => {
//   // @ts-ignore
//   const libCellMl = await new libCellMLModule({
//     locateFile(path: string, prefix: string) {
//       if (path.endsWith(".wasm")) {
//         return prefix + libCellMLWasm;
//       }
//       return prefix + path;
//     },
//   });
// };

// init();

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  // eslint-disable-line global-require
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      nodeIntegration: true,
      contextIsolation: true,
      enableRemoteModule: true,
    },
  });

  const builtMenu = Menu.buildFromTemplate(menuTemplate(mainWindow, fm));
  Menu.setApplicationMenu(builtMenu);

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  mainWindow.maximize();

  // Open the DevTools.
  // TODO: Remove for production
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
